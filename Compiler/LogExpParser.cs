//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LogExp.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class LogExpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, AND=3, OR=4, NEWLINE=5, SYMBOL=6, DIGIT=7, SPACE=8;
	public const int
		RULE_prog = 0, RULE_exp = 1, RULE_sign = 2, RULE_logExp = 3, RULE_operand = 4, 
		RULE_number = 5, RULE_id = 6;
	public static readonly string[] ruleNames = {
		"prog", "exp", "sign", "logExp", "operand", "number", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", "'<'", null, null, null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "AND", "OR", "NEWLINE", "SYMBOL", "DIGIT", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LogExp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LogExpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LogExpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LogExpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(LogExpParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(LogExpParser.NEWLINE, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 14;
				exp();
				State = 16;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 15;
					Match(NEWLINE);
					}
				}

				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SYMBOL || _la==DIGIT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogExpContext[] logExp() {
			return GetRuleContexts<LogExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogExpContext logExp(int i) {
			return GetRuleContext<LogExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(LogExpParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(LogExpParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignContext[] sign() {
			return GetRuleContexts<SignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign(int i) {
			return GetRuleContext<SignContext>(i);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(Context, State);
		EnterRule(_localctx, 2, RULE_exp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			logExp();
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 23;
				Match(SPACE);
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND || _la==OR) {
				{
				{
				State = 29;
				sign();
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 30;
					Match(SPACE);
					}
					}
					State = 33;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SPACE );
				State = 35;
				logExp();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 42;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(LogExpParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LogExpParser.OR, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 4, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public LogExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.EnterLogExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.ExitLogExp(this);
		}
	}

	[RuleVersion(0)]
	public LogExpContext logExp() {
		LogExpContext _localctx = new LogExpContext(Context, State);
		EnterRule(_localctx, 6, RULE_logExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			operand();
			State = 47;
			Match(T__1);
			State = 48;
			operand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 8, RULE_operand);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				id();
				}
				break;
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(LogExpParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(LogExpParser.DIGIT, i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 10, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(DIGIT);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DIGIT) {
				{
				{
				State = 55;
				Match(DIGIT);
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SYMBOL() { return GetTokens(LogExpParser.SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL(int i) {
			return GetToken(LogExpParser.SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(LogExpParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(LogExpParser.DIGIT, i);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogExpListener typedListener = listener as ILogExpListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 12, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(SYMBOL);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SYMBOL || _la==DIGIT) {
				{
				{
				State = 62;
				_la = TokenStream.LA(1);
				if ( !(_la==SYMBOL || _la==DIGIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', 'G', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x13', '\n', '\x2', '\x6', '\x2', 
		'\x15', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x16', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x1B', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x1E', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\"', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', '#', '\x3', '\x3', '\x3', '\x3', '\a', 
		'\x3', '(', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '+', '\v', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x37', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		';', '\n', '\a', '\f', '\a', '\xE', '\a', '>', '\v', '\a', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', '\x42', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\x45', '\v', '\b', '\x3', '\b', '\x2', '\x2', '\t', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x2', '\x4', '\x3', '\x2', '\x5', '\x6', '\x3', 
		'\x2', '\b', '\t', '\x2', 'G', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x18', '\x3', '\x2', '\x2', '\x2', '\x6', '.', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x30', '\x3', '\x2', '\x2', '\x2', '\n', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x38', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x10', '\x12', '\x5', '\x4', '\x3', 
		'\x2', '\x11', '\x13', '\a', '\a', '\x2', '\x2', '\x12', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x14', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x16', '\x3', '\x2', '\x2', '\x2', '\x16', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1C', '\x5', '\b', '\x5', 
		'\x2', '\x19', '\x1B', '\a', '\n', '\x2', '\x2', '\x1A', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', ')', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '!', '\x5', '\x6', '\x4', '\x2', ' ', '\"', 
		'\a', '\n', '\x2', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\x5', '\b', '\x5', '\x2', '&', '(', '\x3', '\x2', '\x2', '\x2', 
		'\'', '\x1F', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', '\x2', 
		'\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', 
		'\x2', '\x2', '*', ',', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', 
		'\x2', '\x2', ',', '-', '\a', '\x3', '\x2', '\x2', '-', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\t', '\x2', '\x2', '\x2', '/', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\n', '\x6', '\x2', '\x31', 
		'\x32', '\a', '\x4', '\x2', '\x2', '\x32', '\x33', '\x5', '\n', '\x6', 
		'\x2', '\x33', '\t', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', '\x5', 
		'\xE', '\b', '\x2', '\x35', '\x37', '\x5', '\f', '\a', '\x2', '\x36', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\v', '\x3', '\x2', '\x2', '\x2', '\x38', '<', '\a', '\t', 
		'\x2', '\x2', '\x39', ';', '\a', '\t', '\x2', '\x2', ':', '\x39', '\x3', 
		'\x2', '\x2', '\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', 
		'\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '\r', 
		'\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '?', 
		'\x43', '\a', '\b', '\x2', '\x2', '@', '\x42', '\t', '\x3', '\x2', '\x2', 
		'\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\n', '\x12', '\x16', '\x1C', 
		'#', ')', '\x36', '<', '\x43',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
